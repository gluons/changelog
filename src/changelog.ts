#!/usr/bin/env node

// Node Built-in modules
import { writeFile } from 'fs';
import { EOL } from 'os';
import { resolve } from 'path';
import { cwd } from 'process';

// External modules
import { cyan, green, magenta, red, yellow } from 'chalk';
import gitRemoteOriginUrl = require('git-remote-origin-url');
import ghGot = require('gh-got');
import parseGitHubUrl = require('parse-github-repo-url');
import ora = require('ora');
import updateNotifier = require('update-notifier');
import yargs = require('yargs');

// Local modules
import GHRelease from './lib/gh-release';
import Parser from './utils/parser';

// Package.json
const pkg = require('../package.json');

// Content epilogue
const epilogue = `Generated by [changelog](https://github.com/gluons/changelog).`;

// CLI usage
const usage = [
	yellow('Generate changelog from GitHub releases.'),
	`Usage: ${green('changelog')} ${cyan('[<GitHub repo slug>]')}`
];

let argv = yargs
			.usage(usage.join(EOL + EOL))
			.help()
			.alias('help', 'h')
			.version()
			.alias('version', 'v')
			.example(green('changelog'), `Generate changelog from repository in ${red('current working directory')}.`)
			.example(`${green('changelog')} ${cyan('gluons/vue-github-buttons')}`, `Generate changelog from ${cyan('gluons/vue-github-buttons')} repository on GitHub.`)
			.epilog(`ℹ️ More information: ${magenta('https://github.com/gluons/changelog')}`)
			.argv;

// Update notifier
updateNotifier({ pkg }).notify();

// Spinner
let spinner = ora({
	spinner: 'dots3'
});

let changelogFilePath = resolve(cwd(), './CHANGELOG.md');

let slugPromise: Promise<string>;

if (Array.isArray(argv._) && (argv._.length > 0)) {
	spinner.text = 'Reading GitHub slug...';
	spinner.start();

	slugPromise = new Promise(resolve => {
		let slug: string = argv._[0];
		resolve(slug);
	});
} else {
	spinner.text = 'Getting GitHub remote url...';
	spinner.start();

	slugPromise = gitRemoteOriginUrl().then(url => {
		spinner.text = 'Reading GitHub slug...';

		let [user, repo] = parseGitHubUrl(url);

		return `${user}/${repo}`;
	});
}

slugPromise
	.then(slug => {
		spinner.text = 'Getting GitHub releases...';

		return ghGot(`repos/${slug}/releases`);
	})
	.then(res => {
		spinner.text = 'Parsing GitHub releases...';

		let rawReleases: GHRelease[] = res.body;
		let parser = new Parser(rawReleases, epilogue);
		let result = parser.parse();

		return result;
	})
	.then(result => {
		spinner.text = 'Writing changelog...';

		return new Promise((resolve, reject) => {
			writeFile(changelogFilePath, result, err => {
				if (err) {
					reject(err);
				} else {
					resolve();
				}
			});
		});
	})
	.then(() => {
		spinner.succeed('Generate complete.');
	})
	.catch(err => {
		let errString = err ? err.toString() : '';

		spinner.fail(`Generate fail.${EOL}${errString}`);
	});
